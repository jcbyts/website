diff --git a/node_modules/svelte/compiler.js b/node_modules/svelte/compiler.js
index acbec69..023f94b 100644
--- a/node_modules/svelte/compiler.js
+++ b/node_modules/svelte/compiler.js
@@ -5895,10 +5895,10 @@
 	};
 
 	const handle_body = (nodes, state) => {
-		const chunks = [];
+		let chunks = [];
 
 		const body = nodes.map(statement => {
-			const chunks = handle(statement, {
+			let chunks = handle(statement, {
 				...state,
 				indent: state.indent
 			});
@@ -5925,14 +5925,14 @@
 			const needs_padding = has_newline(body[i]);
 
 			if (i > 0) {
-				chunks.push(
+				chunks = [...chunks,
 					c(needs_padding || needed_padding ? `\n\n${state.indent}` : `\n${state.indent}`)
-				);
+				];
 			}
 
-			chunks.push(
+			chunks = [...chunks,
 				...body[i]
-			);
+			];
 
 			needed_padding = needs_padding;
 		}
@@ -5941,7 +5941,7 @@
 	};
 
 	const handle_var_declaration = (node, state) => {
-		const chunks = [c(`${node.kind} `)];
+		let chunks = [c(`${node.kind} `)];
 
 		const declarators = node.declarations.map(d => handle(d, {
 			...state,
@@ -5956,11 +5956,11 @@
 		const separator = c(multiple_lines ? `,\n${state.indent}\t` : ', ');
 
 		if (multiple_lines) {
-			chunks.push(...join(declarators, separator));
+			chunks = [...chunks, ...join(declarators, separator)];
 		} else {
-			chunks.push(
+			chunks = [...chunks,
 				...join(declarators, separator)
-			);
+			];
 		}
 
 		return chunks;
@@ -6007,7 +6007,7 @@
 		},
 
 		IfStatement(node, state) {
-			const chunks = [
+			let chunks = [
 				c('if ('),
 				...handle(node.test, state),
 				c(') '),
@@ -6015,10 +6015,10 @@
 			];
 
 			if (node.alternate) {
-				chunks.push(
+				chunks = [...chunks,
 					c(' else '),
 					...handle(node.alternate, state)
-				);
+				];
 			}
 
 			return chunks;
@@ -6054,7 +6054,7 @@
 		},
 
 		SwitchStatement(node, state) {
-			const chunks = [
+			let chunks = [
 				c('switch ('),
 				...handle(node.discriminant, state),
 				c(') {')
@@ -6062,13 +6062,13 @@
 
 			node.cases.forEach(block => {
 				if (block.test) {
-					chunks.push(
+					chunks = [...chunks,
 						c(`\n${state.indent}\tcase `),
 						...handle(block.test, { ...state, indent: `${state.indent}\t` }),
 						c(':')
-					);
+					];
 				} else {
-					chunks.push(c(`\n${state.indent}\tdefault:`));
+					chunks = [...chunks, c(`\n${state.indent}\tdefault:`)];
 				}
 
 				block.consequent.forEach(statement => {
@@ -6105,27 +6105,27 @@
 		},
 
 		TryStatement(node, state) {
-			const chunks = [
+			let chunks = [
 				c('try '),
 				...handle(node.block, state)
 			];
 
 			if (node.handler) {
 				if (node.handler.param) {
-					chunks.push(
+					chunks = [...chunks,
 						c(' catch('),
 						...handle(node.handler.param, state),
 						c(') ')
-					);
+					];
 				} else {
-					chunks.push(c(' catch '));
+					chunks = [...chunks, c(' catch ')];
 				}
 
-				chunks.push(...handle(node.handler.body, state));
+				chunks = [...chunks, ...handle(node.handler.body, state)];
 			}
 
 			if (node.finalizer) {
-				chunks.push(c(' finally '), ...handle(node.finalizer, state));
+				chunks = [...chunks, c(' finally '), ...handle(node.finalizer, state)];
 			}
 
 			return chunks;
@@ -6151,31 +6151,31 @@
 		},
 
 		ForStatement: scoped((node, state) => {
-			const chunks = [c('for (')];
+			let chunks = [c('for (')];
 
 			if (node.init) {
 				if ((node.init ).type === 'VariableDeclaration') {
-					chunks.push(...handle_var_declaration(node.init , state));
+					chunks = [...chunks, ...handle_var_declaration(node.init , state)];
 				} else {
-					chunks.push(...handle(node.init, state));
+					chunks = [...chunks, ...handle(node.init, state)];
 				}
 			}
 
-			chunks.push(c('; '));
-			if (node.test) chunks.push(...handle(node.test, state));
-			chunks.push(c('; '));
-			if (node.update) chunks.push(...handle(node.update, state));
+			chunks = [...chunks, c('; ')];
+			if (node.test) chunks = [...chunks, ...handle(node.test, state)];
+			chunks = [...chunks, c('; ')];
+			if (node.update) chunks = [...chunks, ...handle(node.update, state)];
 
-			chunks.push(
+			chunks = [...chunks,
 				c(') '),
 				...handle(node.body, state)
-			);
+			];
 
 			return chunks;
 		}),
 
 		ForInStatement: scoped((node, state) => {
-			const chunks = [
+			let chunks = [
 				c(`for ${(node ).await ? 'await ' : ''}(`)
 			];
 
@@ -6200,7 +6200,7 @@
 		},
 
 		FunctionDeclaration: scoped((node, state) => {
-			const chunks = [];
+			let chunks = [];
 
 			if (node.async) chunks.push(c('async '));
 			chunks.push(c(node.generator ? 'function* ' : 'function '));
@@ -6231,10 +6231,10 @@
 				);
 			}
 
-			chunks.push(
+			chunks = [...chunks,
 				c(') '),
 				...handle(node.body, state)
-			);
+			];
 
 			return chunks;
 		}),
@@ -6256,7 +6256,7 @@
 		},
 
 		ClassDeclaration(node, state) {
-			const chunks = [c('class ')];
+			let chunks = [c('class ')];
 
 			if (node.id) chunks.push(...handle(node.id, state), c(' '));
 
@@ -6274,7 +6274,7 @@
 		},
 
 		ImportDeclaration(node, state) {
-			const chunks = [c('import ')];
+			let chunks = [c('import ')];
 
 			const { length } = node.specifiers;
 			const source = handle(node.source, state);
@@ -6346,7 +6346,7 @@
 		},
 
 		ExportDefaultDeclaration(node, state) {
-			const chunks = [
+			let chunks = [
 				c(`export default `),
 				...handle(node.declaration, state)
 			];
@@ -6359,7 +6359,7 @@
 		},
 
 		ExportNamedDeclaration(node, state) {
-			const chunks = [c('export ')];
+			let chunks = [c('export ')];
 
 			if (node.declaration) {
 				chunks.push(...handle(node.declaration, state));
@@ -6413,7 +6413,7 @@
 		},
 
 		MethodDefinition(node, state) {
-			const chunks = [];
+			let chunks = [];
 
 			if (node.static) {
 				chunks.push(c('static '));
@@ -6459,7 +6459,7 @@
 		},
 
 		ArrowFunctionExpression: scoped((node, state) => {
-			const chunks = [];
+			let chunks = [];
 
 			if (node.async) chunks.push(c('async '));
 
@@ -6528,7 +6528,7 @@
 		},
 
 		TemplateLiteral(node, state) {
-			const chunks = [c('`')];
+			let chunks = [c('`')];
 
 			const { quasis, expressions } = node;
 
@@ -6554,7 +6554,7 @@
 		},
 
 		ArrayExpression(node, state) {
-			const chunks = [c('[')];
+			let chunks = [c('[')];
 
 			const elements = [];
 			let sparse_commas = [];
@@ -6601,14 +6601,14 @@
 
 			let has_inline_comment = false;
 
-			const chunks = [];
+			let chunks = [];
 			const separator = c(', ');
 
 			node.properties.forEach((p, i) => {
-				chunks.push(...handle(p, {
+				chunks = [...chunks,...handle(p, {
 					...state,
 					indent: state.indent + '\t'
-				}));
+				})];
 
 				if (state.comments.length) {
 					// TODO generalise this, so it works with ArrayExpressions and other things.
@@ -6682,7 +6682,7 @@
 					scope: state.scope_map.get(node.value)
 				};
 
-				const chunks = node.kind !== 'init'
+				let chunks = node.kind !== 'init'
 					? [c(`${node.kind} `)]
 					: [];
 
@@ -6721,7 +6721,7 @@
 		},
 
 		ObjectPattern(node, state) {
-			const chunks = [c('{ ')];
+			let chunks = [c('{ ')];
 
 			for (let i = 0; i < node.properties.length; i += 1) {
 				chunks.push(...handle(node.properties[i], state));
@@ -6744,7 +6744,7 @@
 		},
 
 		UnaryExpression(node, state) {
-			const chunks = [c(node.operator)];
+			let chunks = [c(node.operator)];
 
 			if (node.operator.length > 1) {
 				chunks.push(c(' '));
@@ -6781,7 +6781,7 @@
 		},
 
 		BinaryExpression(node, state) {
-			const chunks = [];
+			let chunks = [];
 
 			// TODO
 			// const is_in = node.operator === 'in';
@@ -6816,7 +6816,7 @@
 		},
 
 		ConditionalExpression(node, state) {
-			const chunks = [];
+			let chunks = [];
 
 			if (
 				EXPRESSIONS_PRECEDENCE[node.test.type] >
@@ -6861,7 +6861,7 @@
 		},
 
 		NewExpression(node, state) {
-			const chunks = [c('new ')];
+			let chunks = [c('new ')];
 
 			if (
 				EXPRESSIONS_PRECEDENCE[node.callee.type] <
@@ -6900,7 +6900,7 @@
 		},
 
 		CallExpression(node, state) {
-			const chunks = [];
+			let chunks = [];
 
 			if (
 				EXPRESSIONS_PRECEDENCE[node.callee.type] <
@@ -6947,7 +6947,7 @@
 		},
 
 		MemberExpression(node, state) {
-			const chunks = [];
+			let chunks = [];
 
 			if (EXPRESSIONS_PRECEDENCE[node.object.type] < EXPRESSIONS_PRECEDENCE.MemberExpression) {
 				chunks.push(
@@ -7074,7 +7074,7 @@
 		let { map: scope_map, scope } = analyze(node);
 		const deconflicted = new WeakMap();
 
-		const chunks = handle(node, {
+		let chunks = handle(node, {
 			indent: '',
 			getName,
 			scope,
@@ -16134,7 +16134,7 @@
 	            chunks.push(current_chunk);
 	        }
 	    }
-	    const chunks = [];
+	    let chunks = [];
 	    while (parser.index < parser.template.length) {
 	        const index = parser.index;
 	        if (done()) {
